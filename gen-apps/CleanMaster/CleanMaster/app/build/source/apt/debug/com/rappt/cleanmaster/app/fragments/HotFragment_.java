//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.rappt.cleanmaster.app.fragments;

import java.util.List;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;
import com.rappt.cleanmaster.app.CleanMasterApplication_;
import com.rappt.cleanmaster.app.R.layout;
import com.rappt.cleanmaster.app.adapters.ListIdAdapter_;
import com.rappt.cleanmaster.app.model.Hot;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class HotFragment_
    extends HotFragment
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.hot, container, false);
        }
        return contentView_;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        app = CleanMasterApplication_.getInstance();
        adapter = ListIdAdapter_.getInstance_(getActivity());
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static HotFragment_.FragmentBuilder_ builder() {
        return new HotFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        message = ((TextView) hasViews.findViewById(com.rappt.cleanmaster.app.R.id.message));
        listId = ((ListView) hasViews.findViewById(com.rappt.cleanmaster.app.R.id.listId));
        {
            AdapterView<?> view = ((AdapterView<?> ) hasViews.findViewById(com.rappt.cleanmaster.app.R.id.listId));
            if (view!= null) {
                view.setOnItemClickListener(new OnItemClickListener() {


                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        HotFragment_.this.listId();
                    }

                }
                );
            }
        }
        init();
    }

    @Override
    public void handleResponse(final List<Hot> data) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                HotFragment_.super.handleResponse(data);
            }

        }
        );
    }

    @Override
    public void loadingFinished() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                HotFragment_.super.loadingFinished();
            }

        }
        );
    }

    @Override
    public void callCleanMasterApihotApps() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    HotFragment_.super.callCleanMasterApihotApps();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public HotFragment build() {
            HotFragment_ fragment_ = new HotFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

    }

}
